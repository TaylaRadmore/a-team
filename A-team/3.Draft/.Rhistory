}
axn = function(type = "WL", age, term = 0, sp = F, i = 0.05)
{
v = 1/(1+i)
annuity_table = annuity_tables(i) # create annuity table with given interest rate
if(type == "WL") # Whole life
{
if(sp == T)
{
# get value from the annuity table created in the selected age
return(annuity_table[which(annuity_table==age,arr.ind=T)[1,1],"a[x]"])
}
else
{
# get value from the annuity table created in the ultimate age
return(annuity_table[which(annuity_table==age,arr.ind=T)[2,1],"ax+2"])
}
}
else # temporary annuity
{
if(sp == T)
{
if(term == 0)
{
return(0)
}
else if(term == 1)
{
return(1)
}
else # term >= 2
{
# recursive call to axn (whole life(x) - pure endowment*whole life(x+n))
return(axn(age = age, sp = T, i = i) - nEx(age = age, term = term, i = i, sp = T)*axn(age = age+term, i = i))
}
}
else # no select period
{
# recursive call to axn (whole life(x) - pure endowment*whole life(x+n))
return(axn(age = age, i = i) - (nEx(age = age, term = term, i = i)*axn(age = age+term, i = i)))
}
}
}
Axn = function(type = "WL", age, term = 0, sp = F, i = 0.05)
{
v = 1/(1+i)
d = i*v
if(type == "WL") # Whole Life Assurance
{
if(sp == T)
{
return(1 - d*axn(age = age, sp = T, i = i))
}
else
{
return(1 - d*axn(age = age, sp = F, i = i))
}
}
else if(type == "END") # Endowment
{
if(sp == T)
{
return(1 - d*axn(type = "END", age = age, term = term, sp = T, i = i))
}
else
{
return(1 - d*axn(type = "END", age = age, term = term, sp = F, i = i))
}
}
else # term assurance
{
if(sp == T)
{
if(term == 0)
{
return(0) # In fact, Axn should not be defined for a zero term.
}
else if(term == 1)
{
return(v*(1 - tpx_select(1,age)))
}
else #term >= 2
{
# recursive call to Axn (whole life(x) - pure endowment*whole life(x+n))
return(Axn(age = age, sp = T, i = i) - (nEx(age = age, term = term, i = i, sp = T))*Axn(age = age+term, i = i))
}
}
else
{
# recursive call to Axn (whole life(x) - pure endowment*whole life(x+n))
return(Axn(age = age, i = i) - (nEx(age = age, term = term, i = i)*Axn(age = age+term, i = i)))
}
}
}
stdnormalpdf = function(z) (2*pi)^(-1/2)*exp(-z^2/2)
integrate(stdnormalpdf,0,Inf) # From zero to infinity
integrate(stdnormalpdf,0,Inf)$value
integrate(stdnormalpdf,0,1) # From zero to one
integrate(stdnormalpdf,-Inf,1.96)
pnorm(1.96)
i=0.05
v=1/(1+i)
delta = log(1+i)
x=60
integrand  =  function(t) v^t*tpx_ult(t,x)*mu(x+t)
integrate(integrand,0,100)
integrate(integrand,0,120)
integrand  =  function(t) v^t*tpx_ult(t,x)*mu(x+t)
function (f, lower, upper, ..., subdivisions = 100L, rel.tol = .Machine$double.eps^0.25,
abs.tol = rel.tol, stop.on.error = TRUE, keep.xy = FALSE,
aux = NULL)
{
f <- match.fun(f)
ff <- function(x) f(x, ...)
limit <- as.integer(subdivisions)
if (limit < 1L || (abs.tol <= 0 && rel.tol < max(50 * .Machine$double.eps,
5e-29)))
stop("invalid parameter values")
if (is.finite(lower) && is.finite(upper)) {
wk <- .External(C_call_dqags, ff, rho = environment(),
as.double(lower), as.double(upper), as.double(abs.tol),
as.double(rel.tol), limit = limit)
}
else {
if (is.na(lower) || is.na(upper))
stop("a limit is missing")
if (is.finite(lower)) {
inf <- 1
bound <- lower
}
else if (is.finite(upper)) {
inf <- -1
bound <- upper
}
else {
inf <- 2
bound <- 0
}
wk <- .External(C_call_dqagi, ff, rho = environment(),
as.double(bound), as.integer(inf), as.double(abs.tol),
as.double(rel.tol), limit = limit)
}
res <- wk[c("value", "abs.error", "subdivisions")]
res$message <- switch(wk$ierr + 1L, "OK", "maximum number of subdivisions reached",
"roundoff error was detected", "extremely bad integrand behaviour",
"roundoff error is detected in the extrapolation table",
"the integral is probably divergent", "the input is invalid")
if (wk$ierr == 6L || (wk$ierr > 0L && stop.on.error))
stop(res$message)
res$call <- match.call()
class(res) <- "integrate"
res
}
integrate(integrand,0,100)
integrate(integrand,0,120)
A_60_bar = integrate(integrand,0,100)$value
A_60 = Axn(type = "WL", age = x) # using function to calculate whole life
c(A_60_bar, sqrt(1+i)*A_60, (i/delta)*A_60)
c(sqrt(1+i)*A_60 - A_60_bar, (i/delta)*A_60 - A_60_bar)
SA = 100000
int = 0.04
A50_20 = Axn(type = "END", age = 50, term = 20, i = int, sp = T)
a50_20 = axn(type = "END", age = 50, term = 20, i = int, sp = T)
premium = (SA*A50_20)/a50_20
print(paste0("The annual Premium is: R", round(premium,2)))
tV = c()
for(t in 0:20)
{
# R starts indexing from 1, hence to get policy value at time 0, we index from time 1
tV[t+1] = ((premium*axn(type = "END", age = 50, term = t, i = int, sp = T)) -
(SA*Axn(type = "TERM", age = 50, term = t, i = int, sp = T)))/
nEx(age = 50, term = t, i = int, sp = T)
}
plot(tV, type = "l", ylab = "Policy Value, tV (in Rands)", xlab = "Time, t")
title("Poliy values for a 20-year Endowment")
SA = 100000
int = 0.06
x = 30
A50_20 = Axn(type = "TERM", age = x, term = n, i = int)
n = 20
a50_20 = axn(type = "END", age = x, term = n, i = int)
premium = (SA*A50_20)/a50_20
print(paste0("The annual Premium is: R", round(premium,2)))
tV = c()
for(t in 0:n)
{
tV[t+1] = ((premium*axn(type = "END", age = x, term = t, i = int)) -
(SA*Axn(type = "TERM", age = x, term = t, i = int)))/
nEx(age = x, term = t, i = int)
}
pol_val = c()
for(t in 0:n)
{
pol_val[t+1] = (SA*Axn(type = "TERM", age = x+t, term = n-t, i = int)) - (premium*axn(type = "END", age = x+t, term = n-t, i = int))
}
round(tV,2) == round(pol_val,2)
plot(tV, type = "l",pch = 19, ylab = "Policy Value, tV (in Rands)", xlab = "Time, t")
title("Poliy values for a 20-year Term Assurance")
for (x in 20:129)
{
i=0.05
v=1/(1+i)
integrand  =  function(t) v^t*tpx_ult(t,x)*mu(x+t)
A_bar[x] = integrate(integrand,0,100)$value
}
A_bar  <- NULL
Axn(type = "WL", 30, term = 0, sp = F, i = (2/1.03))
Axn(type = "WL", 30, term = 0, sp = F, i = (2/103))
x = seq(-3,3, length = 100)
beta = matrix(c(1, 2),2,1)
X = cbind(1,x)
eta = X\%\*\% beta
pi = exp(eta)/(1+exp(eta))
plot(pi~x, type = 'l', col = '#222299')
abline(v = -beta[1]/beta[2],h = 0.5)
eta = X%*% beta
pi = exp(eta)/(1+exp(eta))
plot(pi~x, type = 'l', col = '#222299')
abline(v = -beta[1]/beta[2],h = 0.5)
letters <- vector(A,B,C,D,E)
ff=pnorm(1.575721201)
ff
gg= pnorm(0.3108101366)
gg
ff=pnorm(0.7060948441)
ff
gg= pnorm(1.971005908)
gg
pnorm(1.360902613)
pnorm(0.4153868802)
library("nlmrt")
install.packages("nlmrt")
library("nlmrt")
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
q()
setwd("~/GitHub/a-team/A-team/3.Draft")
library(optimx)
library(naniar)
install.packages("naniar")
library(optimx)
library(naniar)
install.packages("naniar")
library(naniar)
share_data=read.csv("Top40_28Jun2018.csv", header= TRUE, sep=";")
summary(share_data)
share_data_2 <- replace_with_na(share_data, replace = "#N/A N/A")
?replace_to_na
?replace_with_na
share_data_2 <- replace_with_na_at(share_data, replace = list(x ="#N/A N/A") )
share_data_2 <- replace_with_na_at(share_data, replace = list("#N/A N/A") )
?replace_with_na_at
share_data_2 <- replace_with_na_at(share_data, .var="#N/A N/A")
head(share_data_2)
share_data_2 <- replace_with_na_at(share_data, .var="#N/A N/A", condition = TRUE)
head(share_data_2)
summary(share_data_2)
?data.matrix
?data.frame
share_data_1 = data.matrix(share_data)
View(share_data_1)
share_data_3 = data.frame(share_data)
View(share_data_3)
share_data_2 <- replace_with_na_at(share_data_3, .var="#N/A N/A", condition = TRUE)
head(share_data_2)
summary(share_data_2)
summary(share_data_1)
share_data_3 = data.frame(share_data)
summary(share_data_3)
share_data_2 <- replace_with_na_at(share_data_1, .var="#N/A N/A", condition = TRUE)
share_data_2 <- replace_with_na_at(share_data_1, .var="#N/A N/A", condition = TRUE)
summary(share_data)
share_data$FSR.Last.Price
str(share_data)
str(share_data_1)
share_data_2 <- replace_with_na_at(share_data, .var="#N/A N/A", condition = TRUE)
summary(share_data_2)
library(dplyr)
share_data_4 = recode_factor(share_data, "#N/A N/A" = NA_character_)
share_data_4 = recode_factor(share_data_3, "#N/A N/A" = NA_character_)
share_data_4 = recode_factor(share_data$ACL.Total.Return.Index..Gross.Dividends., "#N/A N/A" = NA_character_)
setwd("~/GitHub/a-team/A-team/3.Draft")
library(optimx)
library(naniar)   ### installed better when you choose the no option
share_data=read.csv("Top40_28Jun2018.csv", header= TRUE, sep=";")
library(dplyr)
recode_factor(share_data$ACL.Total.Return.Index..Gross.Dividends., "#N/A N/A" = NA_character_)
share_data$ACL.Total.Return.Index..Gross.Dividends. <- recode_factor(share_data$ACL.Total.Return.Index..Gross.Dividends., "#N/A N/A" = NA_character_)
summary(share_data)
str(share_data)
share_data[,8]
View(share_data)
share_data[,20]
share_data[,20] <- recode_factor(share_data[,20], "#N/A N/A" = NA_character_)
share_data[,20]
ncol(share_data)
cols=ncol(share_data)
cols=ncol(share_data)
for (i in 1:cols)
{
share_data[,i] <- recode_factor(share_data[,i], "#N/A N/A" = NA_character_)
}
View(share_data)
setwd("~/GitHub/a-team/A-team/3.Draft")
library(optimx)
library(naniar)   ### installed better when you choose the no option ---->>> not currently in use
library(dplyr)
share_data=read.csv("Top40_28Jun2018.csv", header= TRUE, sep=";")
summary(share_data)
str(share_data)
View(share_data)
cols=ncol(share_data)
for (i in 1:cols)
{
share_data[,i] <- recode_factor(share_data[,i], "#N/A N/A" = NA_character_)
}
View(share_data)
summary(share_data)
str(share_data)
share_data_1 = data.matrix(share_data)
View(share_data_1) #### drops decimals
summary(share_data_1)   #### makes it numbers
str(share_data_1)
share_data_3 = data.frame(share_data)
View(share_data_3)  #### keeps decimals
summary(share_data_3)   ### still factors though
str(share_data_3)
share_data <- share_data_1   #######!!!!!!!!!!!
length=nrow(share_data)
length
in_sample_length=0.8*length
in_sample_length
in_sample_length <- floor(in_sample_length)
in_sample_length
out_sample_start=in_sample_length+1
out_sample_start
in_sample=share_data[1:in_sample_length,]
View(in_sample)
out_sample=share_data[out_sample_start:length,]
View(out_sample)
sequence_1=seq(from = 3, to = length(in_sample), by = 3)
var_data=in_sample[,sequence_1]
length(in_sample)
ncol(in_sample)
sequence_1=seq(from = 3, to = ncol(in_sample), by = 3)
var_data=in_sample[,sequence_1]
View(var_data)
summary(var_data)
number_of_shares=ncol(var_data)
number_of_shares
for (i in 1:91)
{
variance_vector = NULL
new_variance=var(var_data[,i],na.rm=TRUE)
variance_vector <- c(variance_vector, new_variance )
return(variance_vector)
}
for (i in 1:91)
{
variance_vector = NULL
new_variance=var(var_data[,i],na.rm=TRUE)
variance_vector <- c(variance_vector, new_variance )
print(variance_vector) ### later replace print with return, just trying to see whats happening
}
variance_vector = NULL
for (i in 1:91)
{
new_variance=var(var_data[,i],na.rm=TRUE)
variance_vector <- c(variance_vector, new_variance )
print(variance_vector) ### later replace print with return, just trying to see whats happening
}
variance_vector = NULL
for (i in 1:91)
{
new_variance=var(var_data[,i],na.rm=TRUE)
variance_vector <- c(variance_vector, new_variance )
return(variance_vector) ### later replace print with return, just trying to see whats happening
}
variance_vector
variance_vector = NULL
for (i in 1:91)
{
new_variance=var(var_data[,i],na.rm=TRUE)
variance_vector <- c(variance_vector, new_variance )
}
variance_vector
x=var_data[,2]
summary(x)
x=var_data[,2]
var(x)
setwd("~/GitHub/a-team/A-team/3.Draft")
library(optimx)
library(dplyr)
share_data=read.csv("Top40_28Jun2018.csv", header= TRUE, sep=";")
summary(share_data)
str(share_data)
View(share_data)
cols=ncol(share_data)
View(share_data)
cols
for (i in 1:cols)
{
share_data[,i] <- recode_factor(share_data[,i], "#N/A N/A" = NA_character_)
}
View(share_data)
summary(share_data)
str(share_data)
share_data_1 = data.matrix(share_data)
View(share_data_1) #### drops decimals
summary(share_data_1)   #### makes it numbers
str(share_data_1)
share_data <- share_data_1   #######!!!!!!!!!!!
length=nrow(share_data)
length
in_sample_length=0.8*length
in_sample_length
in_sample_length <- floor(in_sample_length)
in_sample_length
out_sample_start=in_sample_length+1
out_sample_start
in_sample=share_data[1:in_sample_length,]
View(in_sample)
out_sample=share_data[out_sample_start:length,]
View(out_sample)
sequence_1=seq(from = 3, to = ncol(in_sample), by = 3)
sequence_1
var_data=in_sample[,sequence_1]
View(var_data)
summary(var_data)
number_of_shares=ncol(var_data)
number_of_shares
variance_vector = NULL
for (i in 1:91)
{
new_variance=var(var_data[,i],na.rm=TRUE)
variance_vector <- c(variance_vector, new_variance )
}
variance_vector
var(var_data[,2])
var(var_data[,45])
summary(var_data[,45])
variance_vector
start=1/40
starting_values <- rep(start, 40)
starting_values
variance_vector*starting_values
variance_vector%*%starting_values
variance_vector%*% t(starting_values)
summary(variance_vector)
?t
t(variance_vector)%*% starting_values
starting_values <- rep(start, number_of_shares)
starting_values
t(variance_vector)%*% starting_values
t(variance_vector)* starting_values
variance_vector[91]
variance_vector[91]/40
optimx(starting_values, t(variance_vector)* starting_values, lower=0, upper=1,
method=c("Nelder-Mead","BFGS"))
optimx(starting_values, t(variance_vector)* starting_values,
lower=rep(0, number_of_shares), upper=rep(1, number_of_shares),
method=c("Nelder-Mead","BFGS"))
function_to_optimise <- function(variance_vector, starting_values_1)
{
t(variance_vector)* starting_values_1
}
optimx(starting_values_1, function_to_optimise,
lower=rep(0, number_of_shares), upper=rep(1, number_of_shares),
method=c("Nelder-Mead","BFGS"))
starting_values = rep(NULL, number_of_shares)
function_to_optimise <- function(variance_vector, starting_values_1)
{
t(variance_vector)* starting_values_1
}
optimx(starting_values_1, function_to_optimise,
lower=rep(0, number_of_shares), upper=rep(1, number_of_shares),
method=c("Nelder-Mead","BFGS"))
starting_values_1 = rep(NULL, number_of_shares)
function_to_optimise <- function(variance_vector, starting_values_1)
{
t(variance_vector)* starting_values_1
}
optimx(starting_values_1, function_to_optimise,
lower=rep(0, number_of_shares), upper=rep(1, number_of_shares),
method=c("Nelder-Mead","BFGS"))
starting_values_1
?vector
starting_values_1 <- vector(mode="numeric", length=number_of_shares)
starting_values_1
function_to_optimise <- function(variance_vector, starting_values_1)
{
t(variance_vector)* starting_values_1
}
optimx(starting_values_1, function_to_optimise,
lower=rep(0, number_of_shares), upper=rep(1, number_of_shares),
method=c("Nelder-Mead","BFGS"))
starting_values_1 <- vector(mode="numeric", length=number_of_shares)
starting_values_1
function_to_optimise <- function(variance_vector, starting_values_1)
{
sum(t(variance_vector)* starting_values_1)
}
optimx(starting_values_1, function_to_optimise,
lower=rep(0, number_of_shares), upper=rep(1, number_of_shares),
method=c("Nelder-Mead","BFGS"))
t(variance_vector)* starting_values
start=1/40
starting_values <- rep(start, number_of_shares)
starting_values
t(variance_vector)* starting_values^2
sum(t(variance_vector)* starting_values^2)
sum(t(variance_vector)* starting_values^2, na.rm=TRUE)
