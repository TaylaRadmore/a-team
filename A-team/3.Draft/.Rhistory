covarience_vector <- NULL
}
View(covarience_matrix)
cov(var_data[,1],var_data[,2])
covarience_matrix[1,2]
covarience_matrix[1,1]   #### matches excel
covarience_matrix[2,2]   #### ditto
covarience_matrix[3,3]   #### ditto
start=1/number_of_shares
starting_values <- rep(start, number_of_shares)
starting_values
starting_values%*%covarience_matrix%*%starting_values
mvp = optim(starting_values,
function(starting_values) starting_values%*%covarience_matrix%*%starting_values)
mvp
mvp$value
starting_values%*%covarience_matrix%*%starting_values
mvp$par%*%covarience_matrix%*%mvp$par
sum(t(variance_vector)* starting_values^2, na.rm=TRUE)
mini_vector <- NULL
for (i in 1:number_of_shares)
{
mini <- min(var_data[,i], na.rm = TRUE)
mini_vector <- c(mini_vector, mini)
}
mini_vector
mini_vector[1]
mini_vector[2]
mini_vector[3]
start=1/number_of_shares
starting_values <- rep(start, number_of_shares)
mini_vector%*%starting_values
max_mini = optim(starting_values,function(starting_values) -1*mini_vector%*%starting_values)
mini_vector%*%max_mini$par  #### seems legit
setwd("~/GitHub/a-team/A-team/3.Draft")
library(optimx)
library(dplyr)
share_data=read.csv("Top40_28Jun2018_original.csv", header= TRUE, sep=";")
summary(share_data)
str(share_data)
View(share_data)
cols=ncol(share_data)
cols
for (i in 1:cols)
{
share_data[,i] <- recode_factor(share_data[,i], "#N/A N/A" = NA_character_)
}
(cols-1)/3
View(share_data)
summary(share_data)
str(share_data) #### fixed NA
for (i in 2:cols) ### 2 because first column are dates
{
x= share_data[,i]
share_data[,i] <- as.numeric(as.character(sub("," , ".", x)))
}
View(share_data)
summary(share_data)
str(share_data)
share_data[,1] <- as.Date(share_data[,1])
str(share_data)   #### coding dates as dates --> not sure I'll actually need this but just incase
numb_dif_Share=(ncol(share_data)-1)/3
numb_dif_Share   #### seeing how many shares there are
set.seed(2018)
length=nrow(share_data)
length
in_sample_length=0.8*length
in_sample_length
in_sample_length <- floor(in_sample_length)
in_sample_length
out_sample_start=in_sample_length+1
out_sample_start
in_sample=share_data[1:in_sample_length,]
View(in_sample)
out_sample=share_data[out_sample_start:length,]
View(out_sample)
numb_dif_Share=(ncol(share_data)-1)/3
numb_dif_Share   #### seeing how many shares there are
set.seed(2018)
select_shares = sample(0:(numb_dif_Share-1), 40)
select_shares
sequence_shares = c(1,(select_shares*3+2), (select_shares*3+3), (select_shares*3+4))
sequence_shares <- sort(sequence_shares, decreasing = FALSE)
sequence_shares
share_data_final <- share_data[,sequence_shares]
View(share_data_final)
share_data <- share_data_final #####!!!!!!!
sequence_1=seq(from = 3, to = ncol(in_sample), by = 3)
sequence_1
var_data=in_sample[,sequence_1]
View(var_data)
summary(var_data)
number_of_shares=ncol(var_data)
number_of_shares
number_obs = nrow(var_data)
number_obs
numb_dif_Share=(ncol(share_data)-1)/3
numb_dif_Share
sequence_1=seq(from = 3, to = ncol(in_sample), by = 3)
setwd("~/GitHub/a-team/A-team/3.Draft")
library(dplyr)
share_data=read.csv("Top40_28Jun2018_original.csv", header= TRUE, sep=";")
summary(share_data)
str(share_data)
View(share_data)
cols=ncol(share_data)
cols
(cols-1)/3
for (i in 1:cols)
{
share_data[,i] <- recode_factor(share_data[,i], "#N/A N/A" = NA_character_)
}
View(share_data)
summary(share_data)
str(share_data) #### fixed NA
for (i in 2:cols) ### 2 because first column are dates
{
x= share_data[,i]
share_data[,i] <- as.numeric(as.character(sub("," , ".", x)))
}
View(share_data)
summary(share_data)
str(share_data)
share_data[,1] <- as.Date(share_data[,1])
str(share_data)   #### coding dates as dates --> not sure I'll actually need this but just incase
numb_dif_Share=(ncol(share_data)-1)/3
numb_dif_Share   #### seeing how many shares there are
set.seed(2018)
select_shares = sample(0:(numb_dif_Share-1), 40)
select_shares
sequence_shares = c(1,(select_shares*3+2), (select_shares*3+3), (select_shares*3+4))
sequence_shares <- sort(sequence_shares, decreasing = FALSE)
sequence_shares
share_data_final <- share_data[,sequence_shares]
View(share_data_final)
share_data <- share_data_final #####!!!!!!!
length=nrow(share_data)
length
in_sample_length=0.8*length
in_sample_length
in_sample_length <- floor(in_sample_length)
in_sample_length
out_sample_start=in_sample_length+1
out_sample_start
in_sample=share_data[1:in_sample_length,]
View(in_sample)
out_sample=share_data[out_sample_start:length,]
View(out_sample)
sequence_1=seq(from = 3, to = ncol(in_sample), by = 3)
sequence_1
var_data=in_sample[,sequence_1]
View(var_data)
summary(var_data)
number_of_shares=ncol(var_data)
number_of_shares
number_obs = nrow(var_data)
number_obs
covarience_vector <- NULL
covarience_matrix <- NULL
for (i in 1:number_of_shares)
{
for (j in 1:number_of_shares)
{
covariance <- cov(var_data[,i],var_data[,j],  use = "na.or.complete")
covarience_vector <- c(covarience_vector, covariance)
}
covarience_matrix <- cbind (covarience_matrix, covarience_vector)
covarience_vector <- NULL
}
View(covarience_matrix)
cov(var_data[,1],var_data[,2])
covarience_matrix[1,2]
covarience_matrix[1,1]   #### matches excel
covarience_matrix[2,2]   #### ditto
covarience_matrix[3,3]   #### ditto
start=1/number_of_shares
starting_values <- rep(start, number_of_shares)
starting_values
starting_values%*%covarience_matrix%*%starting_values
mvp = optim(starting_values,
function(starting_values) starting_values%*%covarience_matrix%*%starting_values)
=======
?fitted
rm(list = ls(all = TRUE))
# Simulate some data:
y = rnorm(1000,2,1)
# Set up a likelihood function:
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
like
like
res1 = nlm(like, c(5,5))
res1 = nlm(like, c(5,5))
res1 = nlm(like, c(5,5))
rm(list = ls(all = TRUE))
# Simulate some data:
y = rnorm(1000,2,1)
# Set up a likelihood function:
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
like
# Find the minimum of the negative log-likelihood numerically.
# Start at coordinate (5,5) in the parameter space:
res1 = nlm(like, c(5,5))
res1
?nlm
res1 = nlm(like(c(5,5)))
,
res1 = nlm(like, c(5,5))
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
res1 = nlm(like, c(5,5))
lsq = function(theta)
{
# Already minimization problem: Predict y using theta[1]
sum((y-theta[1])^2)
}
# Start at 5 in the 1D parameter space:
res2 = nlm(lsq, c(5))
res2
rm(list = ls(all = TRUE))
# Simulate some data:
y = rnorm(1000,2,1)
# Set up a likelihood function:
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
# Find the minimum of the negative log-likelihood numerically.
# Start at coordinate (5,5) in the parameter space:
res1 = nlm(like, c(5,5))
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
}
# Find the minimum of the negative log-likelihood numerically.
# Start at coordinate (5,5) in the parameter space:
res1 = nlm(like, c(5,5))
res1
setwd("E:/Project coding")
equitiesData=read.csv("Top40_28Jun2018.csv", header= TRUE, sep=",")
head(equitiesData)
nequities = 1 + (ncol(equitiesData)-4)/3
dates = equitiesData[1]
price=equitiesData[-c(1,seq(from=3,to=274,by=3),seq(from=4,to=274,by=3))]
totalReturn=equitiesData[-c(1,seq(from=2,to=274,by=3),seq(from=4,to=274,by=3))]
vol=equitiesData[-c(1,seq(from=2,to=274,by=3),seq(from=3,to=274,by=3))]
days = nrow(dates) # no. of days we have data for
daily_return=matrix(0,nrow=days,ncol=nequities)
for (j in 1:nequities){
for (i in 1:days){
daily_return[i,j]=price[i+1,j]/price[i,j]-1
}
}
daily_return
View(equitiesData)
View(equitiesData)
View(equitiesData)
View(price)
View(totalReturn)
View(vol)
View(daily_return)
equitiesList=read.csv("TOP40_ConstituentsList.csv",header=TRUE,sep=",")
head(equitiesList)
equitiesList=read.csv("TOP40_ConstituentsList.csv",header=TRUE,sep=",")
head(equitiesList)
equitiesNames = equitiesList[1,]
equitiesNames = equitiesList[1,]
equitiesNames
equitiesNames = equitiesList[,1]
equitiesNames
daily_return
dailyReturn=matrix(0,nrow=days,ncol=nequities)
for (j in 1:nequities){
for (i in 1:days){
dailyReturn[i,j]=price[i+1,j]/price[i,j]-1
}
}
dailyReturn
colnames(dailyReturn)=equitiesNames
dailyReturn
>>>>>>> fc1519f4120cb3a4f0bad8602a555d918076ad81
setwd("~/GitHub/a-team/A-team/3.Draft")
library(dplyr)
share_data=read.csv("Top40_28Jun2018_no_purple_or_orange.csv", header= TRUE, sep=";")
summary(share_data)
str(share_data)
View(share_data)
cols=ncol(share_data)
cols
(cols-1)/3
for (i in 1:cols)
{
share_data[,i] <- recode_factor(share_data[,i], "#N/A N/A" = NA_character_)
}
<<<<<<< HEAD
View(share_data)
summary(share_data)
str(share_data) #### fixed NA
for (i in 2:cols) ### 2 because first column are dates
{
x= share_data[,i]
share_data[,i] <- as.numeric(as.character(sub("," , ".", x)))
}
View(share_data)
summary(share_data)
str(share_data)
share_data[,1] <- as.Date(share_data[,1])
str(share_data)   #### coding dates as dates --> not sure I'll actually need this but just incase
numb_dif_Share=(ncol(share_data)-1)/3
numb_dif_Share   #### seeing how many shares there are
set.seed(2018)
select_shares = sample(0:(numb_dif_Share-1), 40)
select_shares
sequence_shares = c(1,(select_shares*3+2), (select_shares*3+3), (select_shares*3+4))
sequence_shares <- sort(sequence_shares, decreasing = FALSE)
sequence_shares
share_data_final <- share_data[,sequence_shares]
View(share_data_final)
share_data <- share_data_final #####!!!!!!!
length=nrow(share_data)
length
in_sample_length=0.8*length
in_sample_length
in_sample_length <- floor(in_sample_length)
in_sample_length
out_sample_start=in_sample_length+1
out_sample_start
in_sample=share_data[1:in_sample_length,]
View(in_sample)
out_sample=share_data[out_sample_start:length,]
View(out_sample)
sequence_1=seq(from = 3, to = ncol(in_sample), by = 3)
sequence_1
var_data=in_sample[,sequence_1]
View(var_data)
summary(var_data)
number_of_shares=ncol(var_data)
number_of_shares
number_obs = nrow(var_data)
number_obs
covarience_vector <- NULL
covarience_matrix <- NULL
for (i in 1:number_of_shares)
{
for (j in 1:number_of_shares)
{
covariance <- cov(var_data[,i],var_data[,j],  use = "na.or.complete")
covarience_vector <- c(covarience_vector, covariance)
}
covarience_matrix <- cbind (covarience_matrix, covarience_vector)
covarience_vector <- NULL
}
View(covarience_matrix)
cov(var_data[,1],var_data[,2])
covarience_matrix[1,2]
covarience_matrix[1,1]   #### matches excel
covarience_matrix[2,2]   #### ditto
covarience_matrix[3,3]   #### ditto
start=1/number_of_shares
starting_values <- rep(start, number_of_shares)
starting_values
starting_values%*%covarience_matrix%*%starting_values
mvp = optim(starting_values,
function(starting_values) starting_values%*%covarience_matrix%*%starting_values)
mvp
mvp$value
starting_values%*%covarience_matrix%*%starting_values
mvp$par%*%covarience_matrix%*%mvp$par
mini_vector <- NULL
for (i in 1:number_of_shares)
{
mini <- min(var_data[,i], na.rm = TRUE)
mini_vector <- c(mini_vector, mini)
}
mini_vector
mini_vector[1]
mini_vector[2]
mini_vector[3]
start=1/number_of_shares
starting_values <- rep(start, number_of_shares)
mini_vector%*%starting_values
max_mini = optim(starting_values,function(starting_values) -1*mini_vector%*%starting_values)
mini_vector%*%max_mini$par  #### seems legit
=======
install.packages(optimx)
install.package(optimx)
install.packages{optimx}
install.packages("optimx")
install.packages("dplyr")
>>>>>>> fc1519f4120cb3a4f0bad8602a555d918076ad81
setwd("~/GitHub/a-team/A-team/3.Draft")
library(dplyr)
share_data=read.csv("Top40_28Jun2018_no_orange.csv", header= TRUE, sep=";")
summary(share_data)
str(share_data)
View(share_data)
cols=ncol(share_data)
cols
(cols-1)/3
for (i in 1:cols)
{
share_data[,i] <- recode_factor(share_data[,i], "#N/A N/A" = NA_character_)
}
View(share_data)
summary(share_data)
str(share_data) #### fixed NA
for (i in 2:cols) ### 2 because first column are dates
{
x= share_data[,i]
share_data[,i] <- as.numeric(as.character(sub("," , ".", x)))
}
View(share_data)
summary(share_data)
str(share_data)
share_data[,1] <- as.Date(share_data[,1])
str(share_data)   #### coding dates as dates --> not sure I'll actually need this but just incase
numb_dif_Share=(ncol(share_data)-1)/3
numb_dif_Share   #### seeing how many shares there are
set.seed(2018)
select_shares = sample(0:(numb_dif_Share-1), 40)
select_shares
sequence_shares = c(1,(select_shares*3+2), (select_shares*3+3), (select_shares*3+4))
sequence_shares <- sort(sequence_shares, decreasing = FALSE)
sequence_shares
share_data_final <- share_data[,sequence_shares]
View(share_data_final)
share_data <- share_data_final #####!!!!!!!
length=nrow(share_data)
length
in_sample_length=0.8*length
in_sample_length
in_sample_length <- floor(in_sample_length)
in_sample_length
out_sample_start=in_sample_length+1
out_sample_start
in_sample=share_data[1:in_sample_length,]
View(in_sample)
out_sample=share_data[out_sample_start:length,]
View(out_sample)
sequence_1=seq(from = 3, to = ncol(in_sample), by = 3)
sequence_1
var_data=in_sample[,sequence_1]
View(var_data)
summary(var_data)
number_of_shares=ncol(var_data)
number_of_shares
number_obs = nrow(var_data)
number_obs
covarience_vector <- NULL
covarience_matrix <- NULL
for (i in 1:number_of_shares)
{
for (j in 1:number_of_shares)
{
covariance <- cov(var_data[,i],var_data[,j],  use = "na.or.complete")
covarience_vector <- c(covarience_vector, covariance)
}
covarience_matrix <- cbind (covarience_matrix, covarience_vector)
covarience_vector <- NULL
}
var(var_data[,2])  #### quick tests
var(var_data[,45])
var(var_data[,40])
summary(var_data[,45])
summary(var_data[,40])
View(covarience_matrix)
cov(var_data[,1],var_data[,2])
covarience_matrix[1,2]
covarience_matrix[1,1]   #### matches excel
covarience_matrix[2,2]   #### ditto
covarience_matrix[3,3]   #### ditto
start=1/number_of_shares
starting_values <- rep(start, number_of_shares)
starting_values
starting_values%*%covarience_matrix%*%starting_values
mvp = optim(starting_values,
function(starting_values) starting_values%*%covarience_matrix%*%starting_values)
mvp
mvp$value
starting_values%*%covarience_matrix%*%starting_values
mvp$par%*%covarience_matrix%*%mvp$par
mini_vector <- NULL
for (i in 1:number_of_shares)
{
mini <- min(var_data[,i], na.rm = TRUE)
mini_vector <- c(mini_vector, mini)
}
mini_vector
mini_vector[1]
mini_vector[2]
mini_vector[3]
start=1/number_of_shares
starting_values <- rep(start, number_of_shares)
mini_vector%*%starting_values
max_mini = optim(starting_values,function(starting_values) -1*mini_vector%*%starting_values)
mini_vector%*%max_mini$par  #### seems legit
