?fitted
rm(list = ls(all = TRUE))
# Simulate some data:
y = rnorm(1000,2,1)
# Set up a likelihood function:
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
like
like
res1 = nlm(like, c(5,5))
res1 = nlm(like, c(5,5))
res1 = nlm(like, c(5,5))
rm(list = ls(all = TRUE))
# Simulate some data:
y = rnorm(1000,2,1)
# Set up a likelihood function:
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
like
# Find the minimum of the negative log-likelihood numerically.
# Start at coordinate (5,5) in the parameter space:
res1 = nlm(like, c(5,5))
res1
?nlm
res1 = nlm(like(c(5,5)))
,
res1 = nlm(like, c(5,5))
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
res1 = nlm(like, c(5,5))
lsq = function(theta)
{
# Already minimization problem: Predict y using theta[1]
sum((y-theta[1])^2)
}
# Start at 5 in the 1D parameter space:
res2 = nlm(lsq, c(5))
res2
rm(list = ls(all = TRUE))
# Simulate some data:
y = rnorm(1000,2,1)
# Set up a likelihood function:
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
# Find the minimum of the negative log-likelihood numerically.
# Start at coordinate (5,5) in the parameter space:
res1 = nlm(like, c(5,5))
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
}
# Find the minimum of the negative log-likelihood numerically.
# Start at coordinate (5,5) in the parameter space:
res1 = nlm(like, c(5,5))
res1
setwd("E:/Project coding")
equitiesData=read.csv("Top40_28Jun2018.csv", header= TRUE, sep=",")
head(equitiesData)
nequities = 1 + (ncol(equitiesData)-4)/3
dates = equitiesData[1]
price=equitiesData[-c(1,seq(from=3,to=274,by=3),seq(from=4,to=274,by=3))]
totalReturn=equitiesData[-c(1,seq(from=2,to=274,by=3),seq(from=4,to=274,by=3))]
vol=equitiesData[-c(1,seq(from=2,to=274,by=3),seq(from=3,to=274,by=3))]
days = nrow(dates) # no. of days we have data for
daily_return=matrix(0,nrow=days,ncol=nequities)
for (j in 1:nequities){
for (i in 1:days){
daily_return[i,j]=price[i+1,j]/price[i,j]-1
}
}
daily_return
View(equitiesData)
View(equitiesData)
View(equitiesData)
View(price)
View(totalReturn)
View(vol)
View(daily_return)
equitiesList=read.csv("TOP40_ConstituentsList.csv",header=TRUE,sep=",")
head(equitiesList)
equitiesList=read.csv("TOP40_ConstituentsList.csv",header=TRUE,sep=",")
head(equitiesList)
equitiesNames = equitiesList[1,]
equitiesNames = equitiesList[1,]
equitiesNames
equitiesNames = equitiesList[,1]
equitiesNames
daily_return
dailyReturn=matrix(0,nrow=days,ncol=nequities)
for (j in 1:nequities){
for (i in 1:days){
dailyReturn[i,j]=price[i+1,j]/price[i,j]-1
}
}
dailyReturn
colnames(dailyReturn)=equitiesNames
dailyReturn
setwd("~/GitHub/a-team/A-team/3.Draft")
library(optimx)
library(dplyr)
share_data=read.csv("Top40_28Jun2018.csv", header= TRUE, sep=";")
summary(share_data)
str(share_data)
View(share_data)
cols=ncol(share_data)
cols
for (i in 1:cols)
{
share_data[,i] <- recode_factor(share_data[,i], "#N/A N/A" = NA_character_)
}
install.packages(optimx)
install.package(optimx)
install.packages{optimx}
install.packages("optimx")
install.packages("dplyr")
