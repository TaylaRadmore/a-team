?fitted
rm(list = ls(all = TRUE))
# Simulate some data:
y = rnorm(1000,2,1)
# Set up a likelihood function:
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
like
like
res1 = nlm(like, c(5,5))
res1 = nlm(like, c(5,5))
res1 = nlm(like, c(5,5))
rm(list = ls(all = TRUE))
# Simulate some data:
y = rnorm(1000,2,1)
# Set up a likelihood function:
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
like
# Find the minimum of the negative log-likelihood numerically.
# Start at coordinate (5,5) in the parameter space:
res1 = nlm(like, c(5,5))
res1
?nlm
res1 = nlm(like(c(5,5)))
,
res1 = nlm(like, c(5,5))
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
res1 = nlm(like, c(5,5))
lsq = function(theta)
{
# Already minimization problem: Predict y using theta[1]
sum((y-theta[1])^2)
}
# Start at 5 in the 1D parameter space:
res2 = nlm(lsq, c(5))
res2
rm(list = ls(all = TRUE))
# Simulate some data:
y = rnorm(1000,2,1)
# Set up a likelihood function:
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
print(theta)
}
# Find the minimum of the negative log-likelihood numerically.
# Start at coordinate (5,5) in the parameter space:
res1 = nlm(like, c(5,5))
like = function(theta)
{
# Turn into min-problem by multiplying by -1:
-sum(dnorm(y,theta[1],theta[2],log= TRUE))
}
# Find the minimum of the negative log-likelihood numerically.
# Start at coordinate (5,5) in the parameter space:
res1 = nlm(like, c(5,5))
res1
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
setwd("E:/Project coding")
setwd("E:/Project coding")
####----------------------set-up--------------------
setwd("E:/Project codi
####----------------------set-up--------------------
setwd("E:/Project codi
####----------------------set-up--------------------
setwd("E:/Project codi
####----------------------set-up--------------------
setwd("E:/Project codi
setwd("E:/Project coding")
library(tseries)
library(dplyr)
library(quadprog)
library(NMOF)
library(limSolve)
library(cvar)
library(fPortfolio)
equitiesData=read.csv("Top40_28Jun2018.csv", header= TRUE, sep=",")
head(equitiesData)
equitiesList=read.csv("TOP40_ConstituentsList.csv",header=TRUE,sep=",")
head(equitiesList)
equitiesNames = equitiesList[,1]
nequities = 1 + (ncol(equitiesData)-4)/3
dates = equitiesData[1]
price=equitiesData[-c(1,seq(from=3,to=274,by=3),seq(from=4,to=274,by=3))]
totalReturn=equitiesData[-c(1,seq(from=2,to=274,by=3),seq(from=4,to=274,by=3))] # most important vector here
vol=equitiesData[-c(1,seq(from=2,to=274,by=3),seq(from=3,to=274,by=3))]
days = nrow(dates) # no. of days we have data for
returnSample = totalReturn
returnSample[returnSample=="#N/A N/A"]=NA_character_
returnSample = as.matrix(as.data.frame(lapply(returnSample, as.numeric)))
str(returnSample)
returnSample=returnSample[ , apply(returnSample, 2, function(x) !any(is.na(x)))]
for (i in 1:ncol(returnSample)){
colnames(returnSample)[i]=substr(colnames(returnSample)[i],1,3)
}
colnames(returnSample)
returnSample = as.timeSeries(returnSample)
mvPortfolio = minvariancePortfolio(returnSample)
mvWeights = getWeights(mvPortfolio)
barplot(mvWeights)
mvWeights=mvWeights[mvWeights>0]
barplot(mvWeights)
legend()
legend(mvWeight)
barplot(mvWeights, main="Mean-Variance Portfolio Weights")
wes(0.05,returnSample)
wes -> function(alpha, data_set, x_var,x_alpha){
}
wes(0.05,returnSample)
wes -> function(alpha, data_set, x_var,x_alpha){
print(alpha)
}
wes(0.05,returnSample)
wes(0.05,returnSample)
wes(0.05,returnSample,3,3)
wes -> function(alpha, data_set, x_var,x_alpha){
print(alpha)
}
wes -> function(alpha, data_set, x_var,x_alpha){
return(alpha)
}
wes <- function(alpha, data_set, x_var,x_alpha){
return(alpha)
}
imtesting<-
asfd
wes(0.05,returnSample,3,3)
wes=function(alpha, xdata){
xalpha=
es = -1/alpha()
}
wes(0.05,returnSample)
help(digits)
ncol(nequitiesData)
ncol(equitiesData)
nsort = ncol(equitiesData) # to sort the data into seperate vectors
price=equitiesData[-c(1,seq(from=3,to=nsort,by=3),seq(from=4,to=nsort,by=3))]
step1 = mean(xdata[xdata<=xalpha])
wes=function(alpha, xdata,lambda,investment){
xalpha=quantile(xdata,prob)
step1 = mean(xdata[xdata<=xalpha])
}
wes(0.05,returnSample)
wes=function(alpha, xdata,lambda,investment){
xalpha=quantile(xdata,alpha)
step1 = mean(xdata[xdata<=xalpha])
}
wes(0.05,returnSample)
wes=function(alpha, xdata,lambda,investment){
xalpha=quantile(xdata,alpha)
step1 = mean(xdata[xdata<=xalpha])
step1
}
wes(0.05,returnSample)
install.packages("extrafont")
barplot(mvWeights, main="Mean-Variance Portfolio Weights",
theme(text=element_text(family="Times New Roman")))
barplot(mvWeights, main="Mean-Variance Portfolio Weights")
title( theme(text=element_text(family="Times New Roman")))
library(extrafont)
barplot(mvWeights, main="Mean-Variance Portfolio Weights")
title( theme(text=element_text(family="Times New Roman")))
title(theme(text=element_text(family="Times New Roman",face="bold", size=12)))
par(family="Times New Roman")
barplot(mvWeights, main="Mean-Variance Portfolio Weights")
warnings()
par(family="times new roman")
barplot(mvWeights, main="Mean-Variance Portfolio Weights")
font_import("Times New Roman")
par(family="serif")
barplot(mvWeights, main="Mean-Variance Portfolio Weights")
